openapi: 3.0.0
info:
  version: '1'
  title: 'Think learn blog api'
  description: 'This is first professfional api we. This is a simple blog api application where anyone a new account, login to their system and create articles that will be vissible publicly'
  contact:
    name: Rafiul Islam
    url: http://rafi.com
    email: rafiulislamcse29@gmail.com

servers:
  - description: Dev
    url: http://localhost:4000/api/v1
    
tags: 
  - name: Auth
    description: Authentication Endpoints (public)
  - name: Articles
    description: Articales Endpoints (public + private)
  - name: Comment
    description: Comment Endpoints (private)
  - name: User
    description: User Endpoints (admin only private)
    
paths:
  '/auth/signup':
   post:
    description: create a new account
    tags: [Auth]
    requestBody:
      content:
        'application/json':
          schema:
            type: object
            properties:
              name:
                type: string
                example: Rafiul Islam
              email:
                type: string
                format: email
                example: rafi@gmail.com
              password:
                type: string
                format: password
                example: MWDKK@#$WD
            required: [name,email,password]
    responses:
      '201':
        description: Signup successful
        content:
          'application/json':
            schema:
              type: object
              properties:
                code: 
                  type: integer
                  format: int32
                  example: 201
                message:
                  type: string
                  example: Signup successful
                data:
                  type: object
                  properties:
                    access_token:
                      type: string
                      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                links:
                  type: object
                  properties:
                    self:
                      type: string
                      example: '/auth/singup'
                    signin:
                      type: string
                      example: '/auth/singin'
      '400': 
        $ref: '#/components/responses/400'
      '500':
        $ref: '#/components/responses/500'
        
  '/auth/sigin':
   post:
    description: Login to your account
    tags: [Auth]
    requestBody:
      content:
        'application/json':
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
                example: rafi@gmail.com
              password:
                type: string
                format: password
                example: MWDKK@#$WD
            required: [email,password]
    responses:
      '200':
        description: Signin successful
        content:
          'application/json':
            schema:
              type: object
              properties:
                code: 
                  type: integer
                  format: int32
                  example: 201
                message:
                  type: string
                  example: Signin successful
                data:
                  type: object
                  properties:
                    access_token:
                      type: string
                      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                links:
                  type: object
                  properties:
                    self:
                      type: string
                      example: '/auth/signin'
      '400': 
        $ref: '#/components/responses/400'
      '500':
        $ref: '#/components/responses/500'
        
  '/articles':
    get:
      
      description: Retrive all public articles
      tags: [Articles]
      parameters: 
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/sortTypeParam'
        - $ref: '#/components/parameters/sortByParam'
        - $ref: '#/components/parameters/searchParam'
            
      responses:
        '200':
          description: Return a list of articles
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                       - type: object
                         properties:
                          id: 
                            type: integer
                            format: int32
                            example: 1
                          title:
                            type: string
                            example: first article
                          cover:
                            type: string
                            format: url
                            example: https://s3.aws.com/firstblog/1232.jpg
                          author: 
                            $ref: '#/components/schemas/AuthorDTO'
                          link:
                            type: string
                            format: url
                            example: '/article/1'
                         required: [id,title, author]
                       - $ref: '#/components/schemas/Timestamp'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  links:
                    properties:
                      self:
                        type: string
                        format: url
                        example: '/articles?/page=2&limit=10'
                      next:
                        type: string
                        format: url
                        example: '/articles?/page=3&limit=10'
                      prev:
                        type: string
                        format: url
                        example: '/articles?/page=1&limit=10'
        '400':
          $ref: '#/components/responses/400' 
        '500':
          $ref: '#/components/responses/500'
    post:
      operationId: createPost
      security: 
        - bearerAuth: []
      description: Create a new article
      tags: [Articles]
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: first article
                body:
                  type: string
                  example: text                  
                cover:
                  type: string
                  format: url
                  example: https://s3.aws.com/firstblog/1232.jpg
                status:
                  type: string
                  format: enum['draft','published',]
                  example: draft
              required: [title,body]
      responses:
        '201':
          description: Succefully created a new article
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ArticleCreatedDTO'
        '400': 
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  '/articles/{id}':
    get:
      tags: [Articles]
      description: Fetch a single article
      parameters: 
        - $ref: '#/components/parameters/idPathParam'
        - in: query
          name: expand
          description: exapnd author and comment object
          schema:
            type: string
            example: 'author,comments'
      responses:
        '200':
          description: Single Article view
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: '#/components/schemas/Article'
                      - type: object
                        properties:
                          author:
                            $ref: '#/components/schemas/AuthorDTO'
                      - type: object
                        properties:
                          comments:
                            type: array
                            items:
                              $ref: '#/components/schemas/Comment'
                  link:
                    properties:
                      self:
                        type: string
                        example: '/article/1'
                      auhtor:
                        type: string
                        example: '/articles/1/author'
                      comment:
                        type: string
                        example: '/articles/1/comments'
                        
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      security: 
        - bearerAuth: []
      tags: [Articles]
      description: Create or Update an entire article
      parameters: 
        - $ref: '#/components/parameters/idPathParam' 
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ArticleUpdatedDTO'
                
      responses:
        '200':
          description: Successfully Updated
          content: 
            'application/json':
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Article updated Successfully
                  data:
                   $ref: '#/components/schemas/Article'
                   
                  link:
                    properties:
                      self:
                        type: string
                        example: '/article/1'
        '201':
          description: Successfully Created
          content: 
            'application/json':
              schema:
                $ref: '#/components/schemas/ArticleCreatedDTO'
          
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    patch:
      security: 
        - bearerAuth: []
      tags: [Articles]
      description: Partially Update an entire article
      parameters: 
        - $ref: '#/components/parameters/idPathParam' 
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: first article
                body:
                  type: string
                  example: text                  
                cover:
                  type: string
                  format: url
                  example: https://s3.aws.com/firstblog/1232.jpg
                status:
                  type: string
                  format: enum['draft','published']
                  example: draft
                
      responses:
        '200':
          description: Successfully Updated
          content:
            'application/json':
              schema:
               $ref: '#/components/schemas/ArticleUpdatedDTO'

        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      security: 
        - bearerAuth: []
      tags: [Articles]
      description: Delete an entire article
      parameters: 
        - $ref: '#/components/parameters/idPathParam' 
                
      responses:
        '204':
          description: Article delete successfully
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Article:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int32
              example: 1
            authorId:
              type: integer
              format: int32
              example: 1
            title:
             type: string
             example: first article
            cover:
              type: string
              format: url
              example: https://s3.aws.com/firstblog/1232.jpg
            body:
              type: string
              format: text
              example: body of the first article
            status:
              type: string
              enum: [draf, published]
          required: [id,authorId, title, body,status]
              
        - $ref: '#/components/schemas/Timestamp'
    ArticleCreatedDTO:
      type: object
      properties:
        code: 
          type: integer
          format: int32
          example: 201
        message:
          type: string
          example: 'Article created successfully'
        data:
            $ref: '#/components/schemas/Article'
        links:
            type: object
            properties:
              self: 
                type: string
                format: url
                example: '/articles/1'
              auhtor: 
                type: string
                format: url
                example: '/articles/1/auhtor'
              comments: 
                type: string
                format: url
                example: '/articles/1/comments'
    ArticleUpdatedDTO:
      type: object
      properties:
        message:
          type: string
          example: 'Article update successfully'
        data:
            $ref: '#/components/schemas/Article'
        links:
            type: object
            properties:
              code: 
                type: integer
                format: int32
                example: 201
              self: 
                type: string
                format: url
                example: '/article/1'
              auhtor: 
                type: string
                format: url
                example: '/article/1/auhtor'
              comments: 
                type: string
                format: url
                example: '/article/1/comment'
    Comment:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int32
              example: 1
            authorId:
              type: integer
              format: int32
              example: 1
            postId:
              type: integer
              format: int32
              example: 1
            body:
              type: string
              format: text
              example: body of the comment
            status:
              type: string
              enum: [public, private]
              example: public
          required: [id,authorId,body,status]
              
        - $ref: '#/components/schemas/Timestamp'
    Timestamp:
      type: object
      properties:
        createdAt:
          type: string
          format: date time
        updatedAt:
          type: string
          format: date time
      required: [createdAt,updatedAt]
    AuthorDTO: 
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: rafi
      required: [id,name]
    Pagination:
      type: object
      properties:
        page:
          type: integer
          format: int32
          example: 2
        limit:
          type: integer
          format: int32
          example: 10
        next:
          type: integer
          format: int32
          example: 3
        prev:
          type: integer
          format: int32
          example: 1
        totalPage:
          type: integer
          format: int32
          example: 5
        totalItems:
          type: integer
          format: int32
          example: 50
      required: [page,limit,totalPage,totalItems]
  responses:
    '500': 
      description: 'Internal server error'
      content:
        'application/json':
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 500
              error:
                type: string
                example: Internal server error
              message: 
                type: string
                example: We are sorry for the inconvennient plase try agin later
    '404': 
      description: 'Resource not found'
      content:
        'application/json':
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 404
              error:
                type: string
                example: Resource not found
              message: 
                type: string
                example: Requested Resources not found
    '401': 
      description: 'Unauthorized'
      content:
        'application/json':
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 401
              error:
                type: string
                example: Unauthorized
              message: 
                type: string
                example: You don't have right permission
    '400': 
      description: 'Bad Request'
      content:
        'application/json':
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 400
              error:
                type: string
                example: Bad Request
              data:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: email
                    message:
                      type: string
                      example: Invalid email
                    in:
                      type: string
                      enum: [query,body]
                      example: body
  parameters:
    pageParam:
      in: query
      name: page
      description: current page number
      schema:
        type: integer
        format: int32
        example: 1
    limitParam:
      in: query
      name: limit
      description: maximum items to be return
      schema:
        type: integer
        format: int32
        example: 10
    sortTypeParam:
      in: query
      name: sort_type
      description: type of sort (asc or dsc)
      schema:
        type: string
        enum:  [asc,dsc]
        example:  dsc
    sortByParam:
      in: query
      name: sort_by
      description: sort key
      schema:
        type: string
        example:  updatedAt
    searchParam:
      in: query
      name: search
      description: search term
      schema:
        type: string
        example:  title
    idPathParam:
        in: path
        name: id
        required: true
        description: Article ID
        schema:
          type: string
          example: '66ec46b83b257ab59d5b8d6d'